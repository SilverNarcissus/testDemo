class Solution {
    int mod = 1_000_000_007;
    long[] fac;
    long[] ifac;
    
    public int distanceSum(int m, int n, int k) {
        fac = new long[n * m];
        ifac = new long[n * m];
        fac[0] = 1;

        for(int i = 1; i < n; i++){
            fac[i] = fac[i - 1] * i;
            fac[i] %= mod;
            ifac[i] = (fac[i] * pow(fac[i], mod - 2)) % mod;
        }

        int res = 0;


        return res;
    }

    private long c(int up, int down){
        if(up == down){
            return 1;
        }
        
        if(down > up){
            return 0;
        }

        return ((fac[up] * ifac[down] % mod) * ifac[up - down]) % mod;
    }

    private long pow(long base, int up){
        long res = 1;
        long mul = base;

        while(up > 0){
            if((up & 1) == 1){
                res *= mul;
                res %= mod;
            }

            mul *= mul;
            mul %= mod;
            up >>= 1;
        }

        return res;
    }

    private long cal(long val){
        return (((1L + val) * val) >> 1) % mod;
    }
}
